name: BUILD AND NOTIFY ON PR

on:
  pull_request:
    branches: 
      - dev

env:
  EMAILS: 'martins@semicolon.africa,damian@semicolon.africa,'

jobs:
  build-and-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Maven Package
        env:
            DATABASE_URL: ${{ env.DATABASE_URL }}
            DATABASE_NAME: ${{ env.DATABASE_NAME }}
            KEYCLOAK_INTROSPECTION_URI: ${{ secrets.KEYCLOAK_INTROSPECTION_URI }}
            KEYCLOAK_SERVER_URL: ${{ secrets.KEYCLOAK_SERVER_URL }}
            KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
            CLIENT_ID:  ${{ secrets.CLIENT_ID }}
            KEYCLOAK_REALM: ${{ secrets.KEYCLOAK_REALM }}
            ADMIN_CLIENT_ID: ${{ secrets.ADMIN_CLIENT_ID }}
            KEYCLOAK_ADMIN_CLIENT_ID: ${{ secrets.KEYCLOAK_ADMIN_CLIENT_ID }}
            KEYCLOAK_MASTER_REALM: ${{ secrets.KEYCLOAK_MASTER_REALM }}
            KEYCLOAK_USERNAME: ${{ secrets.KEYCLOAK_USERNAME }}
            KEYCLOAK_PASSWORD: ${{ secrets.KEYCLOAK_PASSWORD }}
            KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
            CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
            EUREKA_URL: ${{ secrets.EUREKA_URL }}
            PROFILE: ${{ secrets.PROFILE }}
            IDENTITY_SERVICE_APPLICATION_NAME: ${{ secrets.IDENTITY_SERVICE_APPLICATION_NAME }}
            MASTER_REALM_CLIENT_SECRET: ${{ env.MASTER_REALM_CLIENT_SECRET }}
            ADMIN_CLIENT_SECRET: ${{ env.ADMIN_CLIENT_SECRET }}
            PORT: ${{ secrets.PORT }}

            QORE_ID_CLIENT_ID: ${{ secrets.QORE_ID_CLIENT_ID }}
            QORE_ID_CLIENT_SECRET: ${{ secrets.QORE_ID_CLIENT_SECRET }}
            QORE_ID_URL: ${{ secrets.QORE_ID_URL }}
            QORE_ID_TEST_NIN_NUMBER: ${{ secrets.QORE_ID_TEST_NIN_NUMBER }}
            QORE_ID_TEST_BVN_NUMBER: ${{ secrets.QORE_ID_TEST_BVN_NUMBER }}
            QORE_ID_TEST_RC_NUMBER: ${{ secrets.QORE_ID_TEST_RC_NUMBER }}


            PREMBLY_API_KEY: ${{ secrets.PREMBLY_API_KEY }}
            PREMBLY_APP_ID: ${{ secrets.PREMBLY_APP_ID }}
            PREMBLY_URL: ${{ secrets.PREMBLY_URL }}
            PREMBLY_ID_TEST_NIN_NUMBER: ${{ secrets.PREMBLY_ID_TEST_NIN_NUMBER }}
            PREMBLY_ID_TEST_BVN_NUMBER: ${{ secrets.PREMBLY_ID_TEST_BVN_NUMBER }}
            PREMBLY_ID_TEST_CAC_NUMBER: ${{ secrets.PREMBLY_ID_TEST_CAC_NUMBER }}
            EUREKA_INSTANCE_HOSTNAME: ${{ secrets.EUREKA_INSTANCE_HOSTNAME }}
            
        run: mvn -B clean package

      - name: Set environment variables
        id: vars
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TAG="commit-${COMMIT_HASH}-timestamp-${TIMESTAMP}"
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "JAR_NAME=myapp-${TAG}.jar" >> $GITHUB_ENV
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
          # COMMIT_TITLE=$(git log -1 --pretty=%s)
          # COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_AUTHOR=${COMMIT_AUTHOR}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          # echo "COMMIT_TITLE=${COMMIT_TITLE}" >> $GITHUB_ENV
          # echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
         


      - name: Send build success email notification
        if: success()
        env:
          SMTP_SERVER: semicolon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@semicolon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAILS: ${{ env.EMAILS }}
        run: |
          IFS=',' read -r -a email_array <<< "${EMAILS}"
          for email in "${email_array[@]}"
          do
            echo "From: builds@semicolon.africa" > /tmp/email.txt
            echo "To: $email" >> /tmp/email.txt
            echo "Subject: Build Status" >> /tmp/email.txt
            printf "Congratulations, your recent build in the PR you made at Identity Management Backend was successful.\n" >> /tmp/email.txt
            printf "Branch: ${BRANCH_NAME}\n" >> /tmp/email.txt
            printf "Commit Title: ${COMMIT_TITLE}\n" >> /tmp/email.txt
            printf "Commit Message: ${COMMIT_MESSAGE}\n" >> /tmp/email.txt
            printf "Author: ${COMMIT_AUTHOR}\n" >> /tmp/email.txt
            printf "TAG: ${{ env.TAG }}\n\n" >> /tmp/email.txt
            printf "Regards,\nThe Cloud Team" >> /tmp/email.txt
            curl --ssl-reqd \
              --url "smtps://${SMTP_SERVER}:${SMTP_PORT}" \
              --mail-from "builds@semicolon.africa" \
              --mail-rcpt "$email" \
              --user "${SMTP_USERNAME}:${SMTP_PASSWORD}" \
              --upload-file /tmp/email.txt || echo "Failed to send email to $email"
          done

      - name: Send build failure email notification
        if: failure()
        env:
          SMTP_SERVER: semicolon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@semicolon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAILS: ${{ env.EMAILS }}
        run: |
          IFS=',' read -r -a email_array <<< "${EMAILS}"
          for email in "${email_array[@]}"
          do
            echo "From: builds@semicolon.africa" > /tmp/email.txt
            echo "To: $email" >> /tmp/email.txt
            echo "Subject: Build Failure" >> /tmp/email.txt
            printf "Oooops, Yyour recent build in the PR you made at Identity Management Backend was unsuccessful, kindly check the new commit and fix.\n\n" >> /tmp/email.txt
            printf "Branch: ${BRANCH_NAME}\n" >> /tmp/email.txt
            printf "Commit Title: ${COMMIT_TITLE}\n" >> /tmp/email.txt
            printf "Commit Message: ${COMMIT_MESSAGE}\n" >> /tmp/email.txt
            printf "Author: ${COMMIT_AUTHOR}\n" >> /tmp/email.txt
            printf "TAG: ${{ env.TAG }}\n\n" >> /tmp/email.txt
            printf "Regards,\nThe Cloud Team" >> /tmp/email.txt
            curl --ssl-reqd \
              --url "smtps://${SMTP_SERVER}:${SMTP_PORT}" \
              --mail-from "builds@semicolon.africa" \
              --mail-rcpt "$email" \
              --user "${SMTP_USERNAME}:${SMTP_PASSWORD}" \
              --upload-file /tmp/email.txt || echo "Failed to send email to $email"
          done
