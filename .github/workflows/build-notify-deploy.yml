name: Build and Deploy

on:
  push:
    branches:
      - 'main'

env:
  S3_BUCKET_NAME: karrabo-artefacts
  S3_REGION: eu-west-1
  ECR_REPOSITORY: karrabo-onboarding-and-identity-management
  #ECS_CLUSTER: your-ecs-cluster
  #ECS_SERVICE: your-ecs-service
  EMAILS: 'sam@semicolon.africa,joshua.o@semicolon.africa,ibrahim@semicolon.africa'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 18
        uses: actions/setup-java@v2
        with:
          java-version: '18'
          distribution: 'temurin' 

      - name: Build with Maven
        run: mvn clean package

      - name: Set environment variables
        id: vars
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TAG="commit-${COMMIT_HASH}-timestamp-${TIMESTAMP}"
          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "JAR_NAME=myapp-${TAG}.jar" >> $GITHUB_ENV
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          COMMIT_TITLE=$(git log -1 --pretty=%s)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an <%ae>')
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "COMMIT_TITLE=${COMMIT_TITLE}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${COMMIT_AUTHOR}" >> $GITHUB_ENV


      - name: Rename and copy JAR file to folder
        run: |
          mkdir -p jars
          cp target/*.jar "jars/${{ env.JAR_NAME }}"

      - name: Upload JAR to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.S3_REGION }}
          SOURCE_DIR: 'jars'
          DEST_DIR: '/Onboarding-Identity-Management'

      - name: Build and Tag Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.TAG }} .
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.S3_REGION }} | docker login --username AWS --password-stdin 357586184453.dkr.ecr.${{ env.S3_REGION }}.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


      - name: Push Docker image to ECR
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.TAG }} 357586184453.dkr.ecr.${{ env.S3_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}
          docker push 357586184453.dkr.ecr.${{ env.S3_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.TAG }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Deploy to ECS
      #   run: |
      #     ecs-deploy -c ${{ env.ECS_CLUSTER }} -n ${{ env.ECS_SERVICE }} -i ${{ env.ECR_REPOSITORY }}:${{ env.TAG }} --timeout 360
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Send build success email notification
        if: success()
        env:
          SMTP_SERVER: semicolon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@semicolon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAILS: ${{ env.EMAILS }}
        run: |
          IFS=',' read -r -a email_array <<< "${EMAILS}"
          for email in "${email_array[@]}"
          do
            echo "From: builds@semicolon.africa" > /tmp/email.txt
            echo "To: $email" >> /tmp/email.txt
            echo "Subject: Build and Deployment Status" >> /tmp/email.txt
            printf "Congratulations, your recent build was successful.\nTAG: ${{ env.TAG }}" >> /tmp/email.txt
            printf "Branch: ${BRANCH_NAME}\n" >> /tmp/email.txt
            printf "Commit Title: ${COMMIT_TITLE}\n" >> /tmp/email.txt
            printf "Commit Message: ${COMMIT_MESSAGE}\n" >> /tmp/email.txt
            printf "Author: ${COMMIT_AUTHOR}\n" >> /tmp/email.txt
            printf "\nTAG: ${{ env.TAG }}\n\n" >> /tmp/email.txt
            printf "Regards,\nThe Cloud Team" >> /tmp/email.txt
            curl --ssl-reqd \
              --url "smtps://${SMTP_SERVER}:${SMTP_PORT}" \
              --mail-from "builds@semicolon.africa" \
              --mail-rcpt "$email" \
              --user "${SMTP_USERNAME}:${SMTP_PASSWORD}" \
              --upload-file /tmp/email.txt
          done

      - name: Send build failure email notification
        if: failure()
        env:
          SMTP_SERVER: semicolon.africa
          SMTP_PORT: 465
          SMTP_USERNAME: builds@semicolon.africa
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          EMAILS: ${{ env.EMAILS }}
        run: |
          IFS=',' read -r -a email_array <<< "${EMAILS}"
          for email in "${email_array[@]}"
          do
            echo "From: builds@semicolon.africa" > /tmp/email.txt
            echo "To: $email" >> /tmp/email.txt
            echo "Subject: Build Failure" >> /tmp/email.txt
            printf "Oooops, Your recent build was unsuccessful, kindly check the new commit and fix.\n\n" >> /tmp/email.txt
            printf "Branch: ${BRANCH_NAME}\n" >> /tmp/email.txt
            printf "Commit Title: ${COMMIT_TITLE}\n" >> /tmp/email.txt
            printf "Commit Message: ${COMMIT_MESSAGE}\n" >> /tmp/email.txt
            printf "Author: ${COMMIT_AUTHOR}\n" >> /tmp/email.txt
            printf "\nTAG: ${{ env.TAG }}\n\n" >> /tmp/email.txt
            printf "Regards,\nThe Cloud Team" >> /tmp/email.txt
            curl --ssl-reqd \
              --url "smtps://${SMTP_SERVER}:${SMTP_PORT}" \
              --mail-from "builds@semicolon.africa" \
              --mail-rcpt "$email" \
              --user "${SMTP_USERNAME}:${SMTP_PASSWORD}" \
              --upload-file /tmp/email.txt
          done
  
